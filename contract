// SPDX-License-Identifier: MIT

/*

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

pragma solidity >=0.8.17 <0.9.0;

import { Base64 } from 'base64-sol/base64.sol';
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";


//tokenURI interface
interface iTokenURI {
    function tokenURI(uint256 _tokenId) external view returns (string memory);
}

contract CNPTtreasureIsland2023 is Ownable, ERC1155, AccessControl {
    using Strings for uint256;

    string public name;
    string public symbol;
    mapping(uint => string) public tokenURIs;
    bytes32 public constant ADMIN = keccak256("ADMIN");

    constructor(
    ) ERC1155("") {

        name = "TENCHAN";
        symbol = "TN";

        setPhaseId(0);
        setBaseURI("https://nft-mint.xyz/data/paometadata/");

        //first mint
        _mint(msg.sender , 0 , 7 , "");
        _mint(msg.sender , 1 , 7 , "");
        _mint(msg.sender , 2 , 7 , "");
        _mint(msg.sender , 3 , 7 , "");
        setMerkleRoot(0x0251e9feaa27964305a43b927989ecd8dd19a87331554b1251dde0898e49a71b);
        setPause(false);
    }



    //
    //withdraw section
    //

    address public withdrawAddress = 0xDC68E2aF8816B3154c95dab301f7838c7D83A0Ba;

    function setWithdrawAddress(address _withdrawAddress) public onlyOwner {
        withdrawAddress = _withdrawAddress;
    }

    function withdraw() public payable onlyOwner {
        (bool os, ) = payable(withdrawAddress).call{value: address(this).balance}('');
        require(os);
    }


    //
    //mint section
    //

    bool public paused = true;
    bool public onlyAllowlisted = false;
    bool public mintCount = true;
    uint256 public publicSaleMaxMintAmountPerAddress = 9999;
   
    uint256 public phaseId = 1;
    mapping(uint256 => phaseStrct) public phaseData;


    struct phaseStrct {
        uint256 totalSupply;
        uint256 maxSupply;
        uint256 cost;
        uint256 maxMintAmountPerTransaction;
        bytes32 merkleRoot;
        mapping(address => uint256) userMintedAmount;
    }


    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract.");
        _;
    }

    uint256 public minTokenId = 0;
    uint256 public maxTokenId = 3;


    function setMinTokenId(uint256 _minTokenId) public onlyRole(ADMIN) {
        minTokenId = _minTokenId;
    }
    function setMaxTokenId(uint256 _maxTokenId) public onlyRole(ADMIN) {
        maxTokenId = _maxTokenId;
    }




    function mint(uint256 _mintAmount , uint256 _maxMintAmount , bytes32[] calldata _merkleProof , uint256 _tokenId )  external payable callerIsUser{
        require( !paused, "the contract is paused");
        require( 0 < _mintAmount , "need to mint at least 1 NFT");
        require( _mintAmount <= phaseData[phaseId].maxMintAmountPerTransaction, "max mint amount per session exceeded");
        require( phaseData[phaseId].totalSupply + _mintAmount <= phaseData[phaseId].maxSupply, "max NFT limit exceeded");
        require( phaseData[phaseId].cost * _mintAmount <=  msg.value , "insufficient funds");
        require( minTokenId <= _tokenId && _tokenId <= maxTokenId, "Token ID is not supported by this contract");


        uint256 maxMintAmountPerAddress;
        if(onlyAllowlisted == true) {
            bytes32 leaf = keccak256( abi.encodePacked(msg.sender, _maxMintAmount) );
            require(MerkleProof.verify(_merkleProof, phaseData[phaseId].merkleRoot, leaf), "user is not allowlisted");
            maxMintAmountPerAddress = _maxMintAmount;
        }else{
            maxMintAmountPerAddress = publicSaleMaxMintAmountPerAddress;//atode kangaeru
        }


        if(mintCount == true){
            require(_mintAmount <= maxMintAmountPerAddress - phaseData[phaseId].userMintedAmount[msg.sender] , "max NFT per address exceeded");
            phaseData[phaseId].userMintedAmount[msg.sender] += _mintAmount;
        }


        phaseData[_tokenId].totalSupply += _mintAmount;
        _mint(msg.sender, _tokenId , _mintAmount, "");
    }


    bytes32 public constant AIRDROP_ROLE = keccak256("AIRDROP_ROLE");
    function airdropMint(address[] calldata _airdropAddresses , uint256[] memory _UserMintAmount) public {
        require(hasRole(AIRDROP_ROLE, msg.sender), "Caller is not a air dropper");
        require(_airdropAddresses.length == _UserMintAmount.length , "Array lengths are different");
        uint256 _mintAmount = 0;
        for (uint256 i = 0; i < _UserMintAmount.length; i++) {
            _mintAmount += _UserMintAmount[i];
        }
        require( 0 < _mintAmount , "need to mint at least 1 NFT" );
        require( phaseData[phaseId].totalSupply + _mintAmount <= phaseData[phaseId].maxSupply, "max NFT limit exceeded");
        for (uint256 i = 0; i < _UserMintAmount.length; i++) {
            phaseData[phaseId].totalSupply += _UserMintAmount[i];
            _mint(_airdropAddresses[i], phaseId , _UserMintAmount[i] , "" );
        }
    }


    function adminMint(address _address , uint256 _mintAmount ) public onlyRole(ADMIN) {
        phaseData[phaseId].totalSupply += _mintAmount;
        _mint(_address, phaseId , _mintAmount, "");
    }


    function setPhaseData(
        uint256 _id ,
        uint256 _maxSupply ,
        uint256 _cost ,
        uint256 _maxMintAmountPerTransaction ,
        bytes32 _merkleRoot
    ) public onlyRole(ADMIN) {
        phaseData[_id].maxSupply = _maxSupply;
        phaseData[_id].cost = _cost;
        phaseData[_id].maxMintAmountPerTransaction = _maxMintAmountPerTransaction;
        phaseData[_id].merkleRoot = _merkleRoot;
    }


    function setPhaseId(uint256 _id) public onlyRole(ADMIN) {
        phaseId = _id;
    }


    function setMintCount(bool _state) public onlyRole(ADMIN) {
        mintCount = _state;
    }


    function setPause(bool _state) public onlyRole(ADMIN) {
        paused = _state;
    }


    function setCost(uint256 _newCost) public onlyRole(ADMIN) {
        phaseData[phaseId].cost = _newCost;
    }


    function setMaxSupply(uint256 _maxSupply) public onlyRole(ADMIN) {
        phaseData[phaseId].maxSupply = _maxSupply;
    }


    function setMaxMintAmountPerTransaction(uint256 _maxMintAmountPerTransaction) public onlyRole(ADMIN) {
        phaseData[phaseId].maxMintAmountPerTransaction = _maxMintAmountPerTransaction;
    }


    function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(ADMIN) {
        phaseData[phaseId].merkleRoot = _merkleRoot;
    }


    function setPublicSaleMaxMintAmountPerAddress(uint256 _publicSaleMaxMintAmountPerAddress) public onlyRole(ADMIN) {
        publicSaleMaxMintAmountPerAddress = _publicSaleMaxMintAmountPerAddress;
    }


    function setOnlyAllowlisted(bool _state) public onlyRole(ADMIN) {
        onlyAllowlisted = _state;
    }

    //
    //interface metadata
    //

    iTokenURI public interfaceOfTokenURI;
    bool public useInterfaceMetadata = false;

    function setInterfaceOfTokenURI(address _address) public onlyOwner() {
        interfaceOfTokenURI = iTokenURI(_address);
    }

    function setUseInterfaceMetadata(bool _useInterfaceMetadata) public onlyOwner() {
        useInterfaceMetadata = _useInterfaceMetadata;
    }

    //
    //URI section
    //

    bool public useBaseURI = true;
    string public baseURI;
    string public baseExtension = ".json";

    function setBaseURI(string memory _newBaseURI) public onlyRole(ADMIN) {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(string memory _newBaseExtension) public onlyRole(ADMIN) {
        baseExtension = _newBaseExtension;
    }

    //
    //single metadata
    //

    bool public useSingleMetadata = false;
    string public imageURI;
    string public metadataTitle;
    string public metadataDescription;
    string public metadataAttributes;
    bool public useAnimationUrl = false;
    string public animationURI;

    //single image metadata
    function setUseSingleMetadata(bool _useSingleMetadata) public onlyOwner() {
        useSingleMetadata = _useSingleMetadata;
    }
    function setMetadataTitle(string memory _metadataTitle) public onlyOwner {
        metadataTitle = _metadataTitle;
    }
    function setMetadataDescription(string memory _metadataDescription) public onlyOwner {
        metadataDescription = _metadataDescription;
    }
    function setMetadataAttributes(string memory _metadataAttributes) public onlyOwner {
        metadataAttributes = _metadataAttributes;
    }
    function setImageURI(string memory _ImageURI) public onlyOwner {
        imageURI = _ImageURI;
    }
    function setUseAnimationUrl(bool _useAnimationUrl) public onlyOwner() {
        useAnimationUrl = _useAnimationUrl;
    }
    function setAnimationURI(string memory _animationURI) public onlyOwner {
        animationURI = _animationURI;
    }



    //
    //token URI
    //

    function uri(uint256 _id) public override view returns (string memory) {
        if( useInterfaceMetadata == true) {
            return interfaceOfTokenURI.tokenURI(_id);
        }
        if(useSingleMetadata == true){
            return string( abi.encodePacked( 'data:application/json;base64,' , Base64.encode(
                abi.encodePacked(
                    '{',
                        '"name":"' , metadataTitle ,'",' ,
                        '"description":"' , metadataDescription ,  '",' ,
                        '"image": "' , imageURI , '",' ,
                        useAnimationUrl==true ? string(abi.encodePacked('"animation_url": "' , animationURI , '",')) :"" ,
                        '"attributes":[{"trait_type":"type","value":"' , metadataAttributes , '"}]',
                    '}'
                )
            ) ) );
        }
        if( useBaseURI == true) {
            return string(abi.encodePacked( baseURI, _id.toString(), baseExtension));
        }        
        return tokenURIs[_id];
    }

    function setURI(uint _id, string memory _uri) external onlyRole(ADMIN) {
        tokenURIs[_id] = _uri;
        emit URI(_uri, _id);
    }





    //
    //sbt and opensea filter section
    //

    bool public isSBT = false;

    function setIsSBT(bool _state) public onlyRole(ADMIN) {
        isSBT = _state;
    }

    function setApprovalForAll(address, bool) public virtual override {
        revert("This token is SBT.");
    }
    function _beforeTokenTransfer(address, address from, address to, uint256[] memory ids, uint256[] memory, bytes memory) internal virtual override {
        for (uint256 i = 0; i < ids.length; i++) {
            require(from == address(0) || to == address(0), "This token is SBT.");
        }
    }


    // Mapping owner address to address data
    mapping(address => AddressData) _addressData;

    // Compiler will pack this into a single 256bit word.
    struct AddressData {
        // Realistically, 2**64-1 is more than enough.
        uint64 balance;
        // Keeps track of mint count with minimal overhead for tokenomics.
        uint64 numberMinted;
        // Keeps track of burn count with minimal overhead for tokenomics.
        uint64 numberBurned;
        // For miscellaneous variable(s) pertaining to the address
        // (e.g. number of whitelist mint slots used).
        // If there are multiple variables, please pack them into a uint64.
        uint64 aux;
    }

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)
        public
        view
        virtual
        override
        returns (uint256[] memory)
    {
        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");

        uint256[] memory batchBalances = new uint256[](accounts.length);

        for (uint256 i = 0; i < accounts.length; ++i) {
            batchBalances[i] = balanceOf(accounts[i], ids[i]);
        }

        return batchBalances;
    }

    //
    //support interface override
    //
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC1155,AccessControl)
        returns (bool)
    {
        return
            AccessControl.supportsInterface(interfaceId) ||
            ERC1155.supportsInterface(interfaceId) ;
    }


    

}
